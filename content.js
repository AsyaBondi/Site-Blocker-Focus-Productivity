// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function checkIfSiteBlocked() {
  const currentHost = window.location.hostname;
  
  chrome.runtime.sendMessage(
    {
      action: 'getBlockedSites'
    },
    function(response) {
      if (chrome.runtime.lastError) {
        console.log('Connection error:', chrome.runtime.lastError);
        return;
      }
      
      console.log('Current host:', currentHost);
      console.log('Blocked sites list:', response?.sites);
      
      if (response && response.sites) {
        const isBlocked = isDomainBlocked(currentHost, response.sites);
        console.log('Is site blocked?', isBlocked);
        
        if (isBlocked) {
          // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          getSiteStatusAndShowBlockPage(currentHost);
        }
      }
    }
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ–º–µ–Ω–∞ (–≤–∫–ª—é—á–∞—è –ø–æ–¥–¥–æ–º–µ–Ω—ã)
function isDomainBlocked(host, blockedSites) {
  const hostLower = host.toLowerCase();
  
  return blockedSites.some(blockedSite => {
    const blockedSiteLower = blockedSite.toLowerCase().trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (hostLower === blockedSiteLower) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–æ–º–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ru.yummyani.me –¥–ª—è yummyani.me)
    if (hostLower.endsWith('.' + blockedSiteLower)) {
      return true;
    }
    
    return false;
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
function getSiteStatusAndShowBlockPage(host) {
  // –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  const mainDomain = findMainDomain(host);
  
  chrome.runtime.sendMessage(
    {
      action: 'getSiteStatus', 
      siteDomain: mainDomain
    },
    function(response) {
      if (chrome.runtime.lastError) {
        console.log('Connection error:', chrome.runtime.lastError);
        return;
      }
      
      console.log('Site status for', mainDomain, ':', response);
      
      if (response && !response.error) {
        if (response.enabled) {
          // –°–∞–π—Ç –≤–∫–ª—é—á–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ" –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞
          showBlockedPage(host, 'blocked');
        } else if (response.isInDelay && response.timeLeft > 0) {
          // –°–∞–π—Ç –≤ —Ä–µ–∂–∏–º–µ –∑–∞–¥–µ—Ä–∂–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
          showBlockedPage(host, 'delay', response.timeLeft);
        } else {
          // –°–∞–π—Ç –≤—ã–∫–ª—é—á–µ–Ω - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
          console.log('Site is not blocked');
        }
      }
    }
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ –∏–∑ –ø–æ–¥–¥–æ–º–µ–Ω–∞
function findMainDomain(host) {
  const parts = host.split('.');
  if (parts.length > 2) {
    // –î–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ —Ç–∏–ø–∞ ru.yummyani.me –≤–æ–∑–≤—Ä–∞—â–∞–µ–º yummyani.me
    return parts.slice(-2).join('.');
  }
  return host;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
checkIfSiteBlocked();

function showBlockedPage(blockedHost, mode, initialTimeLeft = 60) {
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.stop();
  
  let displayContent = '';
  
  if (mode === 'blocked') {
    // –†–µ–∂–∏–º "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ" - –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞
    displayContent = `
      <div class="countdown">üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
      <p>–°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º "–ë–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ —Å–∞–π—Ç–æ–≤".</p>
    `;
  } else {
    // –†–µ–∂–∏–º –∑–∞–¥–µ—Ä–∂–∫–∏ - —Å —Ç–∞–π–º–µ—Ä–æ–º
    displayContent = `
      <div class="countdown" id="countdown">${initialTimeLeft} —Å–µ–∫—É–Ω–¥</div>
      <div class="progress-bar">
        <div class="progress-fill" id="progressFill"></div>
      </div>
      <p id="countdownMessage">–°–∞–π—Ç —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º —á–µ—Ä–µ–∑ ${initialTimeLeft} —Å–µ–∫—É–Ω–¥</p>
    `;
  }
  
  // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.documentElement.innerHTML = `
  <!DOCTYPE html>
  <html>
  <head>
    <meta charset="utf-8">
    <title>–°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        color: white;
        text-align: center;
      }
      .blocked-container {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        padding: 40px;
        border-radius: 15px;
        text-align: center;
        max-width: 500px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      }
      h1 {
        margin-top: 0;
        font-size: 2em;
        margin-bottom: 20px;
      }
      .countdown {
        font-size: 1.8em;
        font-weight: bold;
        margin: 25px 0;
        padding: 15px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        min-height: 30px;
      }
      .progress-bar {
        width: 100%;
        height: 8px;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 4px;
        margin: 20px 0;
        overflow: hidden;
      }
      .progress-fill {
        height: 100%;
        background: #4CAF50;
        width: 100%;
        transition: width 1s linear;
      }
      .buttons {
        margin-top: 25px;
        display: flex;
        gap: 10px;
        justify-content: center;
        flex-wrap: wrap;
      }
      button {
        background: rgba(255, 255, 255, 0.2);
        border: 2px solid white;
        color: white;
        padding: 12px 24px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        transition: all 0.3s ease;
        min-width: 140px;
      }
      button:hover {
        background: white;
        color: #667eea;
      }
      #reloadPage {
        display: none;
        background: #4CAF50;
        border-color: #4CAF50;
      }
      p {
        line-height: 1.6;
        margin: 10px 0;
      }
      .auto-reload-message {
        font-size: 14px;
        color: rgba(255, 255, 255, 0.8);
        margin-top: 10px;
      }
    </style>
  </head>
  <body>
    <div class="blocked-container">
      <h1>üö´ –°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</h1>
      <p>–î–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É <strong>${blockedHost}</strong> –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.</p>
      
      ${displayContent}
      
      <div class="buttons">
        <button id="reloadPage">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
      </div>
      ${mode === 'delay' ? '<p class="auto-reload-message">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞</p>' : ''}
    </div>
    
    <script>
      let timeLeft = ${initialTimeLeft};
      let countdownInterval;
      let autoReloadTimeout;
      
      function updateCountdown() {
        const countdownElement = document.getElementById('countdown');
        const progressFill = document.getElementById('progressFill');
        const countdownMessage = document.getElementById('countdownMessage');
        const reloadBtn = document.getElementById('reloadPage');
        
        if (timeLeft > 0) {
          timeLeft--;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          let secondsText = '—Å–µ–∫—É–Ω–¥';
          if (timeLeft === 1) secondsText = '—Å–µ–∫—É–Ω–¥–∞';
          else if (timeLeft > 1 && timeLeft < 5) secondsText = '—Å–µ–∫—É–Ω–¥—ã';
          
          if (countdownElement) {
            countdownElement.textContent = timeLeft + ' ' + secondsText;
          }
          if (progressFill) {
            progressFill.style.width = (timeLeft / ${initialTimeLeft} * 100) + '%';
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (countdownMessage) {
            if (timeLeft > 30) {
              countdownMessage.textContent = '–°–∞–π—Ç —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º —á–µ—Ä–µ–∑ ' + timeLeft + ' ' + secondsText;
            } else if (timeLeft > 10) {
              countdownMessage.textContent = '–°–∫–æ—Ä–æ... –æ—Å—Ç–∞–ª–æ—Å—å ' + timeLeft + ' ' + secondsText;
            } else {
              countdownMessage.textContent = '–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! ' + timeLeft + ' ' + secondsText;
            }
          }
          
          // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
          if (timeLeft <= 10) {
            if (countdownElement) countdownElement.style.color = '#ff4444';
            if (progressFill) progressFill.style.background = '#ff4444';
          } else if (timeLeft <= 30) {
            if (countdownElement) countdownElement.style.color = '#ff9800';
            if (progressFill) progressFill.style.background = '#ff9800';
          }
        } else {
          // –í—Ä–µ–º—è –≤—ã—à–ª–æ
          if (countdownInterval) clearInterval(countdownInterval);
          if (countdownElement) {
            countdownElement.textContent = '–°–∞–π—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!';
            countdownElement.style.color = '#4CAF50';
          }
          if (countdownMessage) {
            countdownMessage.textContent = '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...';
          }
          if (progressFill) {
            progressFill.style.width = '0%';
            progressFill.style.background = '#4CAF50';
          }
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
          autoReloadTimeout = setTimeout(() => {
            console.log('Auto-reloading page after countdown');
            window.location.reload();
          }, 2000);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
          if (reloadBtn) {
            reloadBtn.style.display = 'block';
          }
        }
      }
      
      document.getElementById('reloadPage').addEventListener('click', function() {
        if (autoReloadTimeout) clearTimeout(autoReloadTimeout);
        window.location.reload();
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∑–∞–¥–µ—Ä–∂–∫–∏
      if (${mode === 'delay'}) {
        countdownInterval = setInterval(updateCountdown, 1000);
      }
    </script>
  </body>
  </html>
  `;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === 'siteUnblocked') {
    console.log('Site was unblocked:', message.domain);
    
    const currentHost = window.location.hostname;
    const mainDomain = findMainDomain(currentHost);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∞–π—Ç—É
    if (mainDomain === message.domain) {
      console.log('Auto-reloading page due to site unblocking');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    }
  }
  
  if (message.action === 'siteBlocked') {
    console.log('Site was blocked:', message.domain);
    
    const currentHost = window.location.hostname;
    const mainDomain = findMainDomain(currentHost);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∞–π—Ç—É
    if (mainDomain === message.domain) {
      // –ü—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      window.location.reload();
    }
  }
  
  if (message.action === 'updateCountdown') {
    console.log('Updating countdown:', message.timeLeft, 'for domain:', message.domain);
    
    const currentHost = window.location.hostname;
    const mainDomain = findMainDomain(currentHost);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∞–π—Ç—É
    if (mainDomain === message.domain) {
      const countdownElement = document.getElementById('countdown');
      const progressFill = document.getElementById('progressFill');
      const countdownMessage = document.getElementById('countdownMessage');
      
      if (countdownElement && progressFill && countdownMessage) {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        const timeLeft = message.timeLeft;
        
        let secondsText = '—Å–µ–∫—É–Ω–¥';
        if (timeLeft === 1) secondsText = '—Å–µ–∫—É–Ω–¥–∞';
        else if (timeLeft > 1 && timeLeft < 5) secondsText = '—Å–µ–∫—É–Ω–¥—ã';
        
        countdownElement.textContent = timeLeft + ' ' + secondsText;
        progressFill.style.width = (timeLeft / 60 * 100) + '%';
        
        if (timeLeft > 30) {
          countdownMessage.textContent = '–°–∞–π—Ç —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º —á–µ—Ä–µ–∑ ' + timeLeft + ' ' + secondsText;
        } else if (timeLeft > 10) {
          countdownMessage.textContent = '–°–∫–æ—Ä–æ... –æ—Å—Ç–∞–ª–æ—Å—å ' + timeLeft + ' ' + secondsText;
        } else {
          countdownMessage.textContent = '–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! ' + timeLeft + ' ' + secondsText;
        }
        
        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
        if (timeLeft <= 10) {
          countdownElement.style.color = '#ff4444';
          progressFill.style.background = '#ff4444';
        } else if (timeLeft <= 30) {
          countdownElement.style.color = '#ff9800';
          progressFill.style.background = '#ff9800';
        }
        
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (timeLeft === 0) {
          console.log('Countdown finished, reloading page');
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        }
      }
    }
  }
});